// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "main_view.h"
#include "main_controller.h"
#include "modulator_visu.h"
#include "widgets/Fl_Valuator_Ex.h"
#include <ensemble_chorus.h>
#include <Fl_Knob/Fl_Knob.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Toggle_Button.H>
#include <FL/fl_ask.H>
#include <cmath>

void Main_View::cb_sl_wet__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_MIX_WET, from_logarithmic(o->value()));
}
void Main_View::cb_sl_wet_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_wet__i(o,v);
}

void Main_View::cb_sl_dry__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_MIX_DRY, from_logarithmic(o->value()));
}
void Main_View::cb_sl_dry_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_dry__i(o,v);
}

void Main_View::cb_tick_bypass__i(Fl_Check_Button* o, void*) {
  controller()->send_parameter(ECP_BYPASS, o->value());
}
void Main_View::cb_tick_bypass_(Fl_Check_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_tick_bypass__i(o,v);
}

void Main_View::cb_btn_enable1__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ENABLE1, o->value());
}
void Main_View::cb_btn_enable1_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_enable1__i(o,v);
}

void Main_View::cb_sl_phase1__i(Fl_Valuator_Ex<Fl_Value_Slider>* o, void*) {
  controller()->send_parameter(ECP_PHASE1, o->value() * (1.0 / 360));
}
void Main_View::cb_sl_phase1_(Fl_Valuator_Ex<Fl_Value_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_phase1__i(o,v);
}

void Main_View::cb_btn_enable2__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ENABLE2, o->value());
}
void Main_View::cb_btn_enable2_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_enable2__i(o,v);
}

void Main_View::cb_sl_phase2__i(Fl_Valuator_Ex<Fl_Value_Slider>* o, void*) {
  controller()->send_parameter(ECP_PHASE2, o->value() * (1.0 / 360));
}
void Main_View::cb_sl_phase2_(Fl_Valuator_Ex<Fl_Value_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_phase2__i(o,v);
}

void Main_View::cb_btn_enable3__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ENABLE3, o->value());
}
void Main_View::cb_btn_enable3_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_enable3__i(o,v);
}

void Main_View::cb_sl_phase3__i(Fl_Valuator_Ex<Fl_Value_Slider>* o, void*) {
  controller()->send_parameter(ECP_PHASE3, o->value() * (1.0 / 360));
}
void Main_View::cb_sl_phase3_(Fl_Valuator_Ex<Fl_Value_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_phase3__i(o,v);
}

void Main_View::cb_btn_enable4__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ENABLE4, o->value());
}
void Main_View::cb_btn_enable4_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_enable4__i(o,v);
}

void Main_View::cb_sl_phase4__i(Fl_Valuator_Ex<Fl_Value_Slider>* o, void*) {
  controller()->send_parameter(ECP_PHASE4, o->value() * (1.0 / 360));
}
void Main_View::cb_sl_phase4_(Fl_Valuator_Ex<Fl_Value_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_phase4__i(o,v);
}

void Main_View::cb_btn_enable5__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ENABLE5, o->value());
}
void Main_View::cb_btn_enable5_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_enable5__i(o,v);
}

void Main_View::cb_sl_phase5__i(Fl_Valuator_Ex<Fl_Value_Slider>* o, void*) {
  controller()->send_parameter(ECP_PHASE5, o->value() * (1.0 / 360));
}
void Main_View::cb_sl_phase5_(Fl_Valuator_Ex<Fl_Value_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_phase5__i(o,v);
}

void Main_View::cb_btn_enable6__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ENABLE6, o->value());
}
void Main_View::cb_btn_enable6_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_enable6__i(o,v);
}

void Main_View::cb_sl_phase6__i(Fl_Valuator_Ex<Fl_Value_Slider>* o, void*) {
  controller()->send_parameter(ECP_PHASE6, o->value() * (1.0 / 360));
}
void Main_View::cb_sl_phase6_(Fl_Valuator_Ex<Fl_Value_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_phase6__i(o,v);
}

void Main_View::cb_sl_delay__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_DELAY, o->value());
}
void Main_View::cb_sl_delay_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_delay__i(o,v);
}

void Main_View::cb_512_i(Fl_Menu_*, void*) {
  controller()->send_parameter(ECP_NSTAGES, 512);
}
void Main_View::cb_512(Fl_Menu_* o, void* v) {
  ((Main_View*)(o->parent()))->cb_512_i(o,v);
}

void Main_View::cb_1024_i(Fl_Menu_*, void*) {
  controller()->send_parameter(ECP_NSTAGES, 1024);
}
void Main_View::cb_1024(Fl_Menu_* o, void* v) {
  ((Main_View*)(o->parent()))->cb_1024_i(o,v);
}

void Main_View::cb_2048_i(Fl_Menu_*, void*) {
  controller()->send_parameter(ECP_NSTAGES, 2048);
}
void Main_View::cb_2048(Fl_Menu_* o, void* v) {
  ((Main_View*)(o->parent()))->cb_2048_i(o,v);
}

void Main_View::cb_4096_i(Fl_Menu_*, void*) {
  controller()->send_parameter(ECP_NSTAGES, 4096);
}
void Main_View::cb_4096(Fl_Menu_* o, void* v) {
  ((Main_View*)(o->parent()))->cb_4096_i(o,v);
}

void Main_View::cb_8192_i(Fl_Menu_*, void*) {
  controller()->send_parameter(ECP_NSTAGES, 8192);
}
void Main_View::cb_8192(Fl_Menu_* o, void* v) {
  ((Main_View*)(o->parent()))->cb_8192_i(o,v);
}

Fl_Menu_Item Main_View::menu_cb_nstages_[] = {
 {"512", 0,  (Fl_Callback*)Main_View::cb_512, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1024", 0,  (Fl_Callback*)Main_View::cb_1024, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2048", 0,  (Fl_Callback*)Main_View::cb_2048, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4096", 0,  (Fl_Callback*)Main_View::cb_4096, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8192", 0,  (Fl_Callback*)Main_View::cb_8192, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Main_View::cb_dl_slow_rate__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_SLOW_RATE, o->value());
}
void Main_View::cb_dl_slow_rate_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_slow_rate__i(o,v);
}

void Main_View::cb_dl_fast_rate__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_FAST_RATE, o->value());
}
void Main_View::cb_dl_fast_rate_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_fast_rate__i(o,v);
}

void Main_View::cb_sl_depth1__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_DEPTH1, o->value());
}
void Main_View::cb_sl_depth1_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_depth1__i(o,v);
}

void Main_View::cb_sl_depth2__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_DEPTH2, o->value());
}
void Main_View::cb_sl_depth2_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_depth2__i(o,v);
}

void Main_View::cb_sl_depth3__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_DEPTH3, o->value());
}
void Main_View::cb_sl_depth3_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_depth3__i(o,v);
}

void Main_View::cb_sl_depth4__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_DEPTH4, o->value());
}
void Main_View::cb_sl_depth4_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_depth4__i(o,v);
}

void Main_View::cb_sl_depth5__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_DEPTH5, o->value());
}
void Main_View::cb_sl_depth5_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_depth5__i(o,v);
}

void Main_View::cb_sl_depth6__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_DEPTH6, o->value());
}
void Main_View::cb_sl_depth6_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_depth6__i(o,v);
}

void Main_View::cb_cb_slow_wave__i(Fl_Choice* o, void*) {
  controller()->send_parameter(ECP_SLOW_WAVE, o->value());
}
void Main_View::cb_cb_slow_wave_(Fl_Choice* o, void* v) {
  ((Main_View*)(o->parent()))->cb_cb_slow_wave__i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_sine[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,18,148,0,211,19,148,0,
211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,90,148,0,211,204,148,0,211,207,148,0,
211,104,148,0,211,2,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,53,148,0,211,224,148,0,211,136,148,0,211,124,
148,0,211,229,148,0,211,66,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,148,0,211,0,148,0,211,3,148,0,211,160,148,0,211,180,148,0,211,9,148,0,
211,4,148,0,211,165,148,0,211,176,148,0,211,7,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,148,0,211,0,148,0,211,0,148,0,211,44,148,0,211,220,148,0,211,73,148,0,211,
0,148,0,211,0,148,0,211,59,148,0,211,222,148,0,211,58,148,0,211,0,148,0,211,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,124,148,0,211,192,148,0,
211,12,148,0,211,0,148,0,211,0,148,0,211,6,148,0,211,178,148,0,211,138,148,0,
211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,14,148,0,211,195,148,
0,211,111,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,98,148,0,
211,203,148,0,211,20,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,
60,148,0,211,215,148,0,211,42,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,
148,0,211,33,148,0,211,213,148,0,211,72,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,0,148,0,211,130,148,0,211,178,148,0,211,6,148,0,211,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,2,148,0,211,166,148,0,211,144,148,0,211,0,148,0,211,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,12,148,0,211,193,148,0,211,107,148,0,
211,0,148,0,211,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,93,148,0,
211,202,148,0,211,19,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,
211,44,148,0,211,210,148,0,211,44,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,34,148,0,211,212,148,0,211,65,148,0,211,0,148,0,211,
0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,70,148,0,211,81,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,21,148,0,211,75,148,0,211,7,148,0,
211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,4,148,0,211,173,148,
0,211,132,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,4,148,0,211,174,148,0,211,129,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,
0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,106,148,0,211,195,148,0,211,14,148,0,211,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,35,148,0,211,213,148,0,211,66,148,0,
211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,42,148,0,211,215,148,0,211,60,148,
0,211,0,148,0,211,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,98,148,0,211,
201,148,0,211,18,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,6,148,0,211,178,
148,0,211,131,148,0,211,0,148,0,211,0,0,0,0,0,148,0,211,0,148,0,211,3,148,0,211,
170,148,0,211,140,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,
0,211,106,148,0,211,199,148,0,211,16,148,0,211,0,148,0,211,0,148,0,211,0,148,
0,211,40,148,0,211,216,148,0,211,67,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,37,148,0,211,216,148,0,211,77,148,0,211,0,148,0,211,
0,148,0,211,0,148,0,211,120,148,0,211,196,148,0,211,15,148,0,211,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,2,148,0,211,157,148,0,211,173,148,0,211,
6,148,0,211,0,148,0,211,22,148,0,211,205,148,0,211,114,148,0,211,0,148,0,211,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,61,148,0,211,
226,148,0,211,76,148,0,211,0,148,0,211,117,148,0,211,214,148,0,211,31,148,0,211,
0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,4,
148,0,211,151,148,0,211,212,148,0,211,133,148,0,211,228,148,0,211,109,148,0,211,
0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,
0,148,0,211,25,148,0,211,148,148,0,211,185,148,0,211,115,148,0,211,9,148,0,
211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,1,148,0,211,5,148,0,211,0,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,
0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0};
static Fl_Image *image_sine() {
  static Fl_Image *image = new Fl_RGB_Image(idata_sine, 24, 24, 4, 0);
  return image;
}

static const unsigned char idata_square[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,
148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,14,148,0,211,24,148,0,211,25,
148,0,211,24,148,0,211,24,148,0,211,24,148,0,211,24,148,0,211,24,148,0,211,25,
148,0,211,23,148,0,211,9,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,1,148,0,211,137,
148,0,211,198,148,0,211,184,148,0,211,185,148,0,211,185,148,0,211,185,148,0,211,
185,148,0,211,185,148,0,211,184,148,0,211,202,148,0,211,84,148,0,211,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,1,148,0,211,161,148,0,211,108,148,0,211,29,148,0,211,33,148,0,
211,33,148,0,211,33,148,0,211,33,148,0,211,33,148,0,211,31,148,0,211,158,148,0,
211,104,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,1,148,0,211,159,148,0,211,83,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,
148,0,211,142,148,0,211,116,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,1,148,0,211,158,
148,0,211,84,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,
0,148,0,211,130,148,0,211,124,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,2,148,0,211,
164,148,0,211,84,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,123,148,0,211,123,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,6,148,0,
211,175,148,0,211,76,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,123,148,0,211,123,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,6,148,
0,211,172,148,0,211,65,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,124,148,0,211,125,148,0,211,0,148,0,211,0,148,0,211,0,148,
0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,6,148,0,211,172,148,0,211,65,148,0,211,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,121,148,0,211,141,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,6,148,0,211,172,148,0,211,65,
148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,106,
148,0,211,143,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,30,148,0,211,99,148,
0,211,6,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,6,
148,0,211,172,148,0,211,65,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,104,148,0,211,143,148,0,211,0,148,0,211,0,148,0,211,0,148,
0,211,54,148,0,211,181,148,0,211,11,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,148,0,211,0,148,0,211,6,148,0,211,172,148,0,211,65,148,0,211,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,40,148,0,211,55,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,53,148,0,211,183,148,0,211,14,148,0,211,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,6,148,0,211,172,148,0,211,
65,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,47,148,0,211,190,148,
0,211,20,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,6,
148,0,211,172,148,0,211,65,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,38,148,0,211,
184,148,0,211,21,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,7,148,0,211,173,148,0,211,65,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,38,148,0,
211,184,148,0,211,21,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,12,148,0,211,185,148,0,211,62,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,38,
148,0,211,184,148,0,211,21,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,14,148,0,211,182,148,0,211,50,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,37,148,0,211,191,148,0,211,27,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,14,148,0,211,180,148,0,211,48,148,0,211,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,29,148,0,211,189,148,0,211,30,148,0,211,0,148,0,211,0,148,0,211,0,148,
0,211,0,148,0,211,0,148,0,211,0,148,0,211,11,148,0,211,180,148,0,211,48,148,0,
211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,148,0,211,0,148,0,211,24,148,0,211,195,148,0,211,91,148,0,211,64,148,0,
211,65,148,0,211,65,148,0,211,65,148,0,211,65,148,0,211,65,148,0,211,76,148,0,
211,198,148,0,211,48,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,16,148,0,211,152,148,
0,211,175,148,0,211,172,148,0,211,172,148,0,211,172,148,0,211,172,148,0,211,
172,148,0,211,172,148,0,211,173,148,0,211,166,148,0,211,32,148,0,211,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,5,148,0,211,6,148,0,211,6,148,0,211,6,148,0,211,6,
148,0,211,6,148,0,211,6,148,0,211,6,148,0,211,6,148,0,211,5,148,0,211,1,148,0,
211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,
211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0};
static Fl_Image *image_square() {
  static Fl_Image *image = new Fl_RGB_Image(idata_square, 24, 24, 4, 0);
  return image;
}

static const unsigned char idata_saw[] =
{148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,1,148,0,211,4,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,16,148,0,211,
150,148,0,211,78,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,23,148,0,211,219,148,0,
211,232,148,0,211,78,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,24,148,0,211,191,148,0,211,
174,148,0,211,224,148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,24,148,0,211,183,148,0,
211,43,148,0,211,142,148,0,211,226,148,0,211,79,148,0,211,0,148,0,211,0,148,0,
211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,26,148,0,211,187,
148,0,211,32,148,0,211,8,148,0,211,144,148,0,211,226,148,0,211,79,148,0,211,0,
148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,36,148,
0,211,193,148,0,211,29,148,0,211,0,148,0,211,10,148,0,211,144,148,0,211,226,
148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,38,148,0,211,184,148,0,211,21,148,0,211,0,148,0,211,0,148,0,211,10,
148,0,211,144,148,0,211,226,148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,38,148,0,211,184,148,0,211,21,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,10,148,0,211,144,148,0,211,226,148,0,211,79,148,0,
211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,38,148,0,211,184,148,0,
211,21,148,0,211,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,10,148,0,211,144,
148,0,211,226,148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,
38,148,0,211,184,148,0,211,21,148,0,211,0,0,0,0,0,148,0,211,0,148,0,211,0,148,
0,211,0,148,0,211,10,148,0,211,144,148,0,211,226,148,0,211,79,148,0,211,0,148,
0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,148,0,211,0,148,0,211,38,148,0,211,184,148,0,211,21,148,0,211,0,0,0,0,0,
0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,10,148,0,211,144,148,0,211,
226,148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,38,148,0,211,184,148,0,
211,21,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,
0,211,10,148,0,211,144,148,0,211,226,148,0,211,79,148,0,211,0,148,0,211,0,148,
0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,
38,148,0,211,184,148,0,211,21,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,
0,211,0,148,0,211,0,148,0,211,0,148,0,211,10,148,0,211,144,148,0,211,226,148,
0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,38,148,0,211,184,148,0,211,21,148,0,211,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,
10,148,0,211,144,148,0,211,226,148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,49,148,0,211,190,148,
0,211,20,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,10,148,0,211,144,148,0,211,226,148,0,211,79,
148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,53,148,0,211,181,148,0,211,13,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,10,148,0,
211,144,148,0,211,226,148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,53,148,0,211,178,148,0,211,11,148,0,211,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,0,148,0,211,10,148,0,211,144,148,0,211,226,148,0,211,79,148,0,211,0,
148,0,211,0,148,0,211,0,0,0,0,0,148,0,211,0,148,0,211,53,148,0,211,178,148,0,
211,11,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,10,148,0,211,144,148,0,
211,226,148,0,211,79,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,
54,148,0,211,181,148,0,211,11,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,
0,148,0,211,10,148,0,211,144,148,0,211,227,148,0,211,73,148,0,211,0,148,0,211,
0,148,0,211,0,148,0,211,38,148,0,211,127,148,0,211,8,148,0,211,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,148,0,211,0,148,0,211,0,148,0,211,11,148,0,211,132,148,0,211,103,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,1,148,0,211,4,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,1,148,0,211,3,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,
211,0,148,0,211,0};
static Fl_Image *image_saw() {
  static Fl_Image *image = new Fl_RGB_Image(idata_saw, 24, 24, 4, 0);
  return image;
}

static const unsigned char idata_ramp[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,
148,0,211,2,148,0,211,2,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,24,148,0,211,149,
148,0,211,73,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,
0,211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,174,148,0,211,255,148,
0,211,101,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,207,148,0,211,188,
148,0,211,101,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,148,0,211,49,148,0,
211,139,148,0,211,103,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,148,0,211,51,148,0,
211,0,148,0,211,143,148,0,211,107,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,
0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,148,0,211,51,148,
0,211,0,148,0,211,0,148,0,211,139,148,0,211,122,148,0,211,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,148,0,
211,51,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,124,148,0,211,124,148,0,
211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,
211,210,148,0,211,51,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,
123,148,0,211,123,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,
211,176,148,0,211,210,148,0,211,51,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,
148,0,211,0,148,0,211,123,148,0,211,123,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,
211,23,148,0,211,176,148,0,211,210,148,0,211,51,148,0,211,0,148,0,211,0,148,0,
211,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,123,148,0,211,123,148,0,211,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,
0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,148,0,211,51,148,0,211,0,148,
0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,123,148,0,
211,123,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,148,0,211,51,
148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,123,148,0,211,123,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,
148,0,211,51,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,148,0,211,0,148,0,211,123,148,0,211,123,148,0,211,0,148,0,211,0,0,0,
0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,
211,176,148,0,211,210,148,0,211,51,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,124,148,0,211,
124,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,
148,0,211,23,148,0,211,176,148,0,211,210,148,0,211,51,148,0,211,0,148,0,211,0,
148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,122,148,0,211,139,148,0,211,0,148,0,211,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,148,0,211,51,148,0,
211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,148,0,211,0,148,0,211,107,148,0,211,143,148,0,211,0,148,0,211,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,148,0,211,210,
148,0,211,51,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,103,148,0,211,
142,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,23,148,0,211,176,
148,0,211,210,148,0,211,51,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,
148,0,211,104,148,0,211,142,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,17,
148,0,211,175,148,0,211,210,148,0,211,51,148,0,211,0,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,105,148,0,211,145,148,0,211,0,148,0,211,0,148,0,
211,0,148,0,211,36,148,0,211,159,148,0,211,52,148,0,211,0,148,0,211,0,148,0,211,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,74,148,0,211,101,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,1,148,0,211,3,148,0,211,0,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,2,148,0,211,3,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,
0};
static Fl_Image *image_ramp() {
  static Fl_Image *image = new Fl_RGB_Image(idata_ramp, 24, 24, 4, 0);
  return image;
}

static const unsigned char idata_triangle[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,
148,0,211,4,148,0,211,1,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,30,148,0,211,166,
148,0,211,92,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,121,148,0,211,254,148,0,211,
206,148,0,211,24,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,148,0,211,0,148,0,211,0,148,0,211,31,148,0,211,212,148,0,211,137,148,0,
211,209,148,0,211,110,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,124,148,0,211,204,148,0,211,20,148,
0,211,119,148,0,211,207,148,0,211,24,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,27,148,0,211,211,148,0,211,107,
148,0,211,0,148,0,211,29,148,0,211,212,148,0,211,104,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,114,148,0,211,209,
148,0,211,25,148,0,211,0,148,0,211,0,148,0,211,128,148,0,211,200,148,0,211,19,
148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,26,148,0,
211,208,148,0,211,117,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,36,148,0,
211,217,148,0,211,100,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,
148,0,211,114,148,0,211,210,148,0,211,27,148,0,211,0,148,0,211,0,148,0,211,0,
148,0,211,0,148,0,211,131,148,0,211,200,148,0,211,19,148,0,211,0,148,0,211,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,
211,0,148,0,211,0,148,0,211,25,148,0,211,209,148,0,211,117,148,0,211,0,148,0,
211,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,35,148,0,211,217,148,0,211,100,
148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,122,148,0,211,210,148,0,211,
27,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,
130,148,0,211,204,148,0,211,25,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,38,148,0,
211,218,148,0,211,107,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,
0,148,0,211,0,148,0,211,31,148,0,211,211,148,0,211,120,148,0,211,0,148,0,211,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,134,148,0,211,198,148,0,211,17,148,0,211,0,148,0,211,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,110,148,0,211,212,
148,0,211,29,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,38,148,0,211,218,148,0,211,97,148,0,211,0,148,
0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,
211,24,148,0,211,207,148,0,211,121,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,132,148,0,211,198,148,0,
211,17,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,110,148,0,211,211,148,0,211,28,148,0,211,0,
148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,31,148,0,
211,214,148,0,211,100,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,25,148,0,211,208,148,
0,211,111,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,124,148,0,211,204,148,0,211,22,148,0,211,0,148,0,211,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,
0,148,0,211,120,148,0,211,207,148,0,211,24,148,0,211,0,148,0,211,0,0,0,0,0,
148,0,211,0,148,0,211,0,148,0,211,31,148,0,211,214,148,0,211,107,148,0,211,0,
148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,148,0,211,0,148,0,211,0,148,0,211,29,148,0,211,212,148,0,211,110,148,0,
211,0,148,0,211,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,124,148,0,211,204,
148,0,211,22,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,121,
148,0,211,207,148,0,211,24,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,28,148,
0,211,214,148,0,211,107,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,
211,0,148,0,211,29,148,0,211,213,148,0,211,108,148,0,211,0,148,0,211,0,148,0,
211,0,148,0,211,37,148,0,211,146,148,0,211,22,148,0,211,0,148,0,211,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,102,148,0,211,104,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,1,148,0,211,3,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,1,148,0,211,3,148,0,211,0,148,0,
211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,0,148,0,211,
0};
static Fl_Image *image_triangle() {
  static Fl_Image *image = new Fl_RGB_Image(idata_triangle, 24, 24, 4, 0);
  return image;
}

Fl_Menu_Item Main_View::menu_cb_slow_wave_[] = {
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Main_View::cb_cb_fast_wave__i(Fl_Choice* o, void*) {
  controller()->send_parameter(ECP_FAST_WAVE, o->value());
}
void Main_View::cb_cb_fast_wave_(Fl_Choice* o, void* v) {
  ((Main_View*)(o->parent()))->cb_cb_fast_wave__i(o,v);
}

Fl_Menu_Item Main_View::menu_cb_fast_wave_[] = {
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Main_View::cb_sl_gain_in__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_GAIN_IN, 3.0 * from_logarithmic(o->value()));
}
void Main_View::cb_sl_gain_in_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_gain_in__i(o,v);
}

void Main_View::cb_sl_gain_out__i(Fl_Valuator_Ex<Fl_Slider>* o, void*) {
  controller()->send_parameter(ECP_GAIN_OUT, 3.0 * from_logarithmic(o->value()));
}
void Main_View::cb_sl_gain_out_(Fl_Valuator_Ex<Fl_Slider>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_sl_gain_out__i(o,v);
}

void Main_View::cb_dl_slow_rand__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_SLOW_RAND, o->value());
}
void Main_View::cb_dl_slow_rand_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_slow_rand__i(o,v);
}

void Main_View::cb_dl_fast_rand__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_FAST_RAND, o->value());
}
void Main_View::cb_dl_fast_rand_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_fast_rand__i(o,v);
}

void Main_View::cb_dl_mod_range__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_MOD_RANGE, o->value());
}
void Main_View::cb_dl_mod_range_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_mod_range__i(o,v);
}

void Main_View::cb_dl_lpf_cutoff__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_LPF_CUTOFF, o->value());
}
void Main_View::cb_dl_lpf_cutoff_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_lpf_cutoff__i(o,v);
}

void Main_View::cb_dl_lpf_q__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_LPF_Q, o->value());
}
void Main_View::cb_dl_lpf_q_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_lpf_q__i(o,v);
}

void Main_View::cb_btn_mono__i(Fl_Toggle_Button* o, void*) {
  if (!o->value())
    o->value(1);
else {
    controller()->send_parameter(ECP_CHANNEL_LAYOUT, ECC_MONO);
    btn_stereo_->value(0);
};
}
void Main_View::cb_btn_mono_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_mono__i(o,v);
}

void Main_View::cb_btn_stereo__i(Fl_Toggle_Button* o, void*) {
  if (!o->value())
    o->value(1);
else {
    controller()->send_parameter(ECP_CHANNEL_LAYOUT, ECC_STEREO);
    btn_mono_->value(0);
};
}
void Main_View::cb_btn_stereo_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_stereo__i(o,v);
}

void Main_View::cb_btn_routeL1__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_L1, o->value());
}
void Main_View::cb_btn_routeL1_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeL1__i(o,v);
}

void Main_View::cb_btn_routeR1__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_R1, o->value());
}
void Main_View::cb_btn_routeR1_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeR1__i(o,v);
}

void Main_View::cb_btn_routeL2__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_L2, o->value());
}
void Main_View::cb_btn_routeL2_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeL2__i(o,v);
}

void Main_View::cb_btn_routeR2__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_R2, o->value());
}
void Main_View::cb_btn_routeR2_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeR2__i(o,v);
}

void Main_View::cb_btn_routeL3__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_L3, o->value());
}
void Main_View::cb_btn_routeL3_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeL3__i(o,v);
}

void Main_View::cb_btn_routeR3__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_R3, o->value());
}
void Main_View::cb_btn_routeR3_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeR3__i(o,v);
}

void Main_View::cb_btn_routeL4__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_L4, o->value());
}
void Main_View::cb_btn_routeL4_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeL4__i(o,v);
}

void Main_View::cb_btn_routeR4__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_R4, o->value());
}
void Main_View::cb_btn_routeR4_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeR4__i(o,v);
}

void Main_View::cb_btn_routeL5__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_L5, o->value());
}
void Main_View::cb_btn_routeL5_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeL5__i(o,v);
}

void Main_View::cb_btn_routeR5__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_R5, o->value());
}
void Main_View::cb_btn_routeR5_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeR5__i(o,v);
}

void Main_View::cb_btn_routeL6__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_L6, o->value());
}
void Main_View::cb_btn_routeL6_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeL6__i(o,v);
}

void Main_View::cb_btn_routeR6__i(Fl_Toggle_Button* o, void*) {
  controller()->send_parameter(ECP_ROUTE_R6, o->value());
}
void Main_View::cb_btn_routeR6_(Fl_Toggle_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_btn_routeR6__i(o,v);
}

void Main_View::cb_Load_i(Fl_Button*, void*) {
  if (!controller()->load_parameters()) {
    fl_message_title("Error");
    fl_alert("Could not load the preset file.");
};
}
void Main_View::cb_Load(Fl_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_Load_i(o,v);
}

void Main_View::cb_Save_i(Fl_Button*, void*) {
  if (!controller()->save_parameters()) {
    fl_message_title("Error");
    fl_alert("Could not save the preset file.");
};
}
void Main_View::cb_Save(Fl_Button* o, void* v) {
  ((Main_View*)(o->parent()))->cb_Save_i(o,v);
}

void Main_View::cb_dl_regen__i(Fl_Valuator_Ex<Fl_Knob>* o, void*) {
  controller()->send_parameter(ECP_REGEN, o->value());
}
void Main_View::cb_dl_regen_(Fl_Valuator_Ex<Fl_Knob>* o, void* v) {
  ((Main_View*)(o->parent()))->cb_dl_regen__i(o,v);
}
Main_View::Main_View(int X, int Y, int W, int H, const char *L)
  : Fl_Group(X, Y, W, H, L) {
this->labelfont(13);
{ sl_wet_ = new Fl_Valuator_Ex<Fl_Slider>(500, 30, 25, 95, "Wet");
  sl_wet_->type(4);
  sl_wet_->box(FL_THIN_DOWN_BOX);
  sl_wet_->color(FL_BACKGROUND_COLOR);
  sl_wet_->selection_color(FL_BACKGROUND_COLOR);
  sl_wet_->labeltype(FL_EMBOSSED_LABEL);
  sl_wet_->labelfont(0);
  sl_wet_->labelsize(12);
  sl_wet_->labelcolor(FL_FOREGROUND_COLOR);
  sl_wet_->minimum(1);
  sl_wet_->maximum(0);
  sl_wet_->callback((Fl_Callback*)cb_sl_wet_);
  sl_wet_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_wet_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_wet_
{ sl_dry_ = new Fl_Valuator_Ex<Fl_Slider>(525, 30, 25, 95, "Dry");
  sl_dry_->type(4);
  sl_dry_->box(FL_THIN_DOWN_BOX);
  sl_dry_->color(FL_BACKGROUND_COLOR);
  sl_dry_->selection_color(FL_BACKGROUND_COLOR);
  sl_dry_->labeltype(FL_EMBOSSED_LABEL);
  sl_dry_->labelfont(0);
  sl_dry_->labelsize(12);
  sl_dry_->labelcolor(FL_FOREGROUND_COLOR);
  sl_dry_->minimum(1);
  sl_dry_->maximum(0);
  sl_dry_->callback((Fl_Callback*)cb_sl_dry_);
  sl_dry_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_dry_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_dry_
{ Fl_Box* o = new Fl_Box(0, 0, 230, 42, "JPC Ensemble Chorus");
  o->box(FL_SHADOW_BOX);
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
  o->labelsize(16);
} // Fl_Box* o
{ tick_bypass_ = new Fl_Check_Button(235, 10, 75, 25, "Bypass");
  tick_bypass_->down_box(FL_DOWN_BOX);
  tick_bypass_->labeltype(FL_EMBOSSED_LABEL);
  tick_bypass_->callback((Fl_Callback*)cb_tick_bypass_);
} // Fl_Check_Button* tick_bypass_
{ Fl_Box* o = new Fl_Box(500, 5, 50, 25, "Mix");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
} // Fl_Box* o
{ Fl_Box* o = new Fl_Box(65, 55, 105, 25, "Phase");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
  o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
} // Fl_Box* o
{ btn_enable1_ = new Fl_Toggle_Button(20, 80, 25, 25, "1");
  btn_enable1_->box(FL_UP_BOX);
  btn_enable1_->color(FL_BACKGROUND_COLOR);
  btn_enable1_->selection_color(FL_BACKGROUND_COLOR);
  btn_enable1_->labeltype(FL_EMBOSSED_LABEL);
  btn_enable1_->labelfont(0);
  btn_enable1_->labelsize(14);
  btn_enable1_->labelcolor(FL_FOREGROUND_COLOR);
  btn_enable1_->callback((Fl_Callback*)cb_btn_enable1_);
  btn_enable1_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_enable1_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_enable1_
{ sl_phase1_ = new Fl_Valuator_Ex<Fl_Value_Slider>(65, 80, 105, 25);
  sl_phase1_->type(1);
  sl_phase1_->box(FL_DOWN_BOX);
  sl_phase1_->color(FL_BACKGROUND_COLOR);
  sl_phase1_->selection_color(FL_BACKGROUND_COLOR);
  sl_phase1_->labeltype(FL_NORMAL_LABEL);
  sl_phase1_->labelfont(0);
  sl_phase1_->labelsize(14);
  sl_phase1_->labelcolor(FL_FOREGROUND_COLOR);
  sl_phase1_->maximum(359);
  sl_phase1_->step(1);
  sl_phase1_->callback((Fl_Callback*)cb_sl_phase1_);
  sl_phase1_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_phase1_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Value_Slider>* sl_phase1_
{ btn_enable2_ = new Fl_Toggle_Button(20, 105, 25, 25, "2");
  btn_enable2_->box(FL_UP_BOX);
  btn_enable2_->color(FL_BACKGROUND_COLOR);
  btn_enable2_->selection_color(FL_BACKGROUND_COLOR);
  btn_enable2_->labeltype(FL_EMBOSSED_LABEL);
  btn_enable2_->labelfont(0);
  btn_enable2_->labelsize(14);
  btn_enable2_->labelcolor(FL_FOREGROUND_COLOR);
  btn_enable2_->callback((Fl_Callback*)cb_btn_enable2_);
  btn_enable2_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_enable2_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_enable2_
{ sl_phase2_ = new Fl_Valuator_Ex<Fl_Value_Slider>(65, 105, 105, 25);
  sl_phase2_->type(1);
  sl_phase2_->box(FL_DOWN_BOX);
  sl_phase2_->color(FL_BACKGROUND_COLOR);
  sl_phase2_->selection_color(FL_BACKGROUND_COLOR);
  sl_phase2_->labeltype(FL_NORMAL_LABEL);
  sl_phase2_->labelfont(0);
  sl_phase2_->labelsize(14);
  sl_phase2_->labelcolor(FL_FOREGROUND_COLOR);
  sl_phase2_->maximum(359);
  sl_phase2_->step(1);
  sl_phase2_->callback((Fl_Callback*)cb_sl_phase2_);
  sl_phase2_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_phase2_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Value_Slider>* sl_phase2_
{ btn_enable3_ = new Fl_Toggle_Button(20, 130, 25, 25, "3");
  btn_enable3_->box(FL_UP_BOX);
  btn_enable3_->color(FL_BACKGROUND_COLOR);
  btn_enable3_->selection_color(FL_BACKGROUND_COLOR);
  btn_enable3_->labeltype(FL_EMBOSSED_LABEL);
  btn_enable3_->labelfont(0);
  btn_enable3_->labelsize(14);
  btn_enable3_->labelcolor(FL_FOREGROUND_COLOR);
  btn_enable3_->callback((Fl_Callback*)cb_btn_enable3_);
  btn_enable3_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_enable3_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_enable3_
{ sl_phase3_ = new Fl_Valuator_Ex<Fl_Value_Slider>(65, 130, 105, 25);
  sl_phase3_->type(1);
  sl_phase3_->box(FL_DOWN_BOX);
  sl_phase3_->color(FL_BACKGROUND_COLOR);
  sl_phase3_->selection_color(FL_BACKGROUND_COLOR);
  sl_phase3_->labeltype(FL_NORMAL_LABEL);
  sl_phase3_->labelfont(0);
  sl_phase3_->labelsize(14);
  sl_phase3_->labelcolor(FL_FOREGROUND_COLOR);
  sl_phase3_->maximum(359);
  sl_phase3_->step(1);
  sl_phase3_->callback((Fl_Callback*)cb_sl_phase3_);
  sl_phase3_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_phase3_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Value_Slider>* sl_phase3_
{ btn_enable4_ = new Fl_Toggle_Button(20, 155, 25, 25, "4");
  btn_enable4_->box(FL_UP_BOX);
  btn_enable4_->color(FL_BACKGROUND_COLOR);
  btn_enable4_->selection_color(FL_BACKGROUND_COLOR);
  btn_enable4_->labeltype(FL_EMBOSSED_LABEL);
  btn_enable4_->labelfont(0);
  btn_enable4_->labelsize(14);
  btn_enable4_->labelcolor(FL_FOREGROUND_COLOR);
  btn_enable4_->callback((Fl_Callback*)cb_btn_enable4_);
  btn_enable4_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_enable4_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_enable4_
{ sl_phase4_ = new Fl_Valuator_Ex<Fl_Value_Slider>(65, 155, 105, 25);
  sl_phase4_->type(1);
  sl_phase4_->box(FL_DOWN_BOX);
  sl_phase4_->color(FL_BACKGROUND_COLOR);
  sl_phase4_->selection_color(FL_BACKGROUND_COLOR);
  sl_phase4_->labeltype(FL_NORMAL_LABEL);
  sl_phase4_->labelfont(0);
  sl_phase4_->labelsize(14);
  sl_phase4_->labelcolor(FL_FOREGROUND_COLOR);
  sl_phase4_->maximum(359);
  sl_phase4_->step(1);
  sl_phase4_->callback((Fl_Callback*)cb_sl_phase4_);
  sl_phase4_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_phase4_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Value_Slider>* sl_phase4_
{ btn_enable5_ = new Fl_Toggle_Button(20, 180, 25, 25, "5");
  btn_enable5_->box(FL_UP_BOX);
  btn_enable5_->color(FL_BACKGROUND_COLOR);
  btn_enable5_->selection_color(FL_BACKGROUND_COLOR);
  btn_enable5_->labeltype(FL_EMBOSSED_LABEL);
  btn_enable5_->labelfont(0);
  btn_enable5_->labelsize(14);
  btn_enable5_->labelcolor(FL_FOREGROUND_COLOR);
  btn_enable5_->callback((Fl_Callback*)cb_btn_enable5_);
  btn_enable5_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_enable5_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_enable5_
{ sl_phase5_ = new Fl_Valuator_Ex<Fl_Value_Slider>(65, 180, 105, 25);
  sl_phase5_->type(1);
  sl_phase5_->box(FL_DOWN_BOX);
  sl_phase5_->color(FL_BACKGROUND_COLOR);
  sl_phase5_->selection_color(FL_BACKGROUND_COLOR);
  sl_phase5_->labeltype(FL_NORMAL_LABEL);
  sl_phase5_->labelfont(0);
  sl_phase5_->labelsize(14);
  sl_phase5_->labelcolor(FL_FOREGROUND_COLOR);
  sl_phase5_->maximum(359);
  sl_phase5_->step(1);
  sl_phase5_->callback((Fl_Callback*)cb_sl_phase5_);
  sl_phase5_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_phase5_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Value_Slider>* sl_phase5_
{ btn_enable6_ = new Fl_Toggle_Button(20, 205, 25, 25, "6");
  btn_enable6_->box(FL_UP_BOX);
  btn_enable6_->color(FL_BACKGROUND_COLOR);
  btn_enable6_->selection_color(FL_BACKGROUND_COLOR);
  btn_enable6_->labeltype(FL_EMBOSSED_LABEL);
  btn_enable6_->labelfont(0);
  btn_enable6_->labelsize(14);
  btn_enable6_->labelcolor(FL_FOREGROUND_COLOR);
  btn_enable6_->callback((Fl_Callback*)cb_btn_enable6_);
  btn_enable6_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_enable6_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_enable6_
{ sl_phase6_ = new Fl_Valuator_Ex<Fl_Value_Slider>(65, 205, 105, 25);
  sl_phase6_->type(1);
  sl_phase6_->box(FL_DOWN_BOX);
  sl_phase6_->color(FL_BACKGROUND_COLOR);
  sl_phase6_->selection_color(FL_BACKGROUND_COLOR);
  sl_phase6_->labeltype(FL_NORMAL_LABEL);
  sl_phase6_->labelfont(0);
  sl_phase6_->labelsize(14);
  sl_phase6_->labelcolor(FL_FOREGROUND_COLOR);
  sl_phase6_->maximum(359);
  sl_phase6_->step(1);
  sl_phase6_->callback((Fl_Callback*)cb_sl_phase6_);
  sl_phase6_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_phase6_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Value_Slider>* sl_phase6_
{ sl_delay_ = new Fl_Valuator_Ex<Fl_Slider>(450, 30, 25, 95);
  sl_delay_->type(4);
  sl_delay_->box(FL_THIN_DOWN_BOX);
  sl_delay_->color(FL_BACKGROUND_COLOR);
  sl_delay_->selection_color(FL_BACKGROUND_COLOR);
  sl_delay_->labeltype(FL_NORMAL_LABEL);
  sl_delay_->labelfont(0);
  sl_delay_->labelsize(14);
  sl_delay_->labelcolor(FL_FOREGROUND_COLOR);
  sl_delay_->minimum(1);
  sl_delay_->maximum(0);
  sl_delay_->callback((Fl_Callback*)cb_sl_delay_);
  sl_delay_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_delay_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_delay_
{ Fl_Box* o = new Fl_Box(435, 5, 55, 25, "Delay");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
} // Fl_Box* o
{ cb_nstages_ = new Fl_Choice(370, 30, 65, 20);
  cb_nstages_->down_box(FL_BORDER_BOX);
  cb_nstages_->menu(menu_cb_nstages_);
} // Fl_Choice* cb_nstages_
{ Fl_Box* o = new Fl_Box(370, 5, 65, 25, "Stages");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
} // Fl_Box* o
{ visu_mod1_ = new Modulator_Visu(245, 80, 55, 25);
  visu_mod1_->box(FL_DOWN_BOX);
  visu_mod1_->color(FL_BACKGROUND_COLOR);
  visu_mod1_->selection_color(FL_BACKGROUND_COLOR);
  visu_mod1_->labeltype(FL_NORMAL_LABEL);
  visu_mod1_->labelfont(0);
  visu_mod1_->labelsize(14);
  visu_mod1_->labelcolor(FL_FOREGROUND_COLOR);
  visu_mod1_->align(Fl_Align(FL_ALIGN_CENTER));
  visu_mod1_->when(FL_WHEN_RELEASE);
} // Modulator_Visu* visu_mod1_
{ visu_mod2_ = new Modulator_Visu(245, 105, 55, 25);
  visu_mod2_->box(FL_DOWN_BOX);
  visu_mod2_->color(FL_BACKGROUND_COLOR);
  visu_mod2_->selection_color(FL_BACKGROUND_COLOR);
  visu_mod2_->labeltype(FL_NORMAL_LABEL);
  visu_mod2_->labelfont(0);
  visu_mod2_->labelsize(14);
  visu_mod2_->labelcolor(FL_FOREGROUND_COLOR);
  visu_mod2_->align(Fl_Align(FL_ALIGN_CENTER));
  visu_mod2_->when(FL_WHEN_RELEASE);
} // Modulator_Visu* visu_mod2_
{ visu_mod3_ = new Modulator_Visu(245, 130, 55, 25);
  visu_mod3_->box(FL_DOWN_BOX);
  visu_mod3_->color(FL_BACKGROUND_COLOR);
  visu_mod3_->selection_color(FL_BACKGROUND_COLOR);
  visu_mod3_->labeltype(FL_NORMAL_LABEL);
  visu_mod3_->labelfont(0);
  visu_mod3_->labelsize(14);
  visu_mod3_->labelcolor(FL_FOREGROUND_COLOR);
  visu_mod3_->align(Fl_Align(FL_ALIGN_CENTER));
  visu_mod3_->when(FL_WHEN_RELEASE);
} // Modulator_Visu* visu_mod3_
{ visu_mod4_ = new Modulator_Visu(245, 155, 55, 25);
  visu_mod4_->box(FL_DOWN_BOX);
  visu_mod4_->color(FL_BACKGROUND_COLOR);
  visu_mod4_->selection_color(FL_BACKGROUND_COLOR);
  visu_mod4_->labeltype(FL_NORMAL_LABEL);
  visu_mod4_->labelfont(0);
  visu_mod4_->labelsize(14);
  visu_mod4_->labelcolor(FL_FOREGROUND_COLOR);
  visu_mod4_->align(Fl_Align(FL_ALIGN_CENTER));
  visu_mod4_->when(FL_WHEN_RELEASE);
} // Modulator_Visu* visu_mod4_
{ visu_mod5_ = new Modulator_Visu(245, 180, 55, 25);
  visu_mod5_->box(FL_DOWN_BOX);
  visu_mod5_->color(FL_BACKGROUND_COLOR);
  visu_mod5_->selection_color(FL_BACKGROUND_COLOR);
  visu_mod5_->labeltype(FL_NORMAL_LABEL);
  visu_mod5_->labelfont(0);
  visu_mod5_->labelsize(14);
  visu_mod5_->labelcolor(FL_FOREGROUND_COLOR);
  visu_mod5_->align(Fl_Align(FL_ALIGN_CENTER));
  visu_mod5_->when(FL_WHEN_RELEASE);
} // Modulator_Visu* visu_mod5_
{ visu_mod6_ = new Modulator_Visu(245, 205, 55, 25);
  visu_mod6_->box(FL_DOWN_BOX);
  visu_mod6_->color(FL_BACKGROUND_COLOR);
  visu_mod6_->selection_color(FL_BACKGROUND_COLOR);
  visu_mod6_->labeltype(FL_NORMAL_LABEL);
  visu_mod6_->labelfont(0);
  visu_mod6_->labelsize(14);
  visu_mod6_->labelcolor(FL_FOREGROUND_COLOR);
  visu_mod6_->align(Fl_Align(FL_ALIGN_CENTER));
  visu_mod6_->when(FL_WHEN_RELEASE);
} // Modulator_Visu* visu_mod6_
{ Fl_Box* o = new Fl_Box(245, 55, 95, 25, "Modulator");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
  o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
} // Fl_Box* o
{ dl_slow_rate_ = new Fl_Valuator_Ex<Fl_Knob>(380, 210, 45, 45);
  dl_slow_rate_->box(FL_OVAL_BOX);
  dl_slow_rate_->color(FL_BACKGROUND_COLOR);
  dl_slow_rate_->selection_color(FL_INACTIVE_COLOR);
  dl_slow_rate_->labeltype(FL_NORMAL_LABEL);
  dl_slow_rate_->labelfont(0);
  dl_slow_rate_->labelsize(14);
  dl_slow_rate_->labelcolor(FL_FOREGROUND_COLOR);
  dl_slow_rate_->callback((Fl_Callback*)cb_dl_slow_rate_);
  dl_slow_rate_->align(Fl_Align(FL_ALIGN_BOTTOM));
  dl_slow_rate_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_slow_rate_
{ dl_fast_rate_ = new Fl_Valuator_Ex<Fl_Knob>(500, 210, 45, 45);
  dl_fast_rate_->box(FL_OVAL_BOX);
  dl_fast_rate_->color(FL_BACKGROUND_COLOR);
  dl_fast_rate_->selection_color(FL_INACTIVE_COLOR);
  dl_fast_rate_->labeltype(FL_NORMAL_LABEL);
  dl_fast_rate_->labelfont(0);
  dl_fast_rate_->labelsize(14);
  dl_fast_rate_->labelcolor(FL_FOREGROUND_COLOR);
  dl_fast_rate_->callback((Fl_Callback*)cb_dl_fast_rate_);
  dl_fast_rate_->align(Fl_Align(FL_ALIGN_BOTTOM));
  dl_fast_rate_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_fast_rate_
{ Fl_Box* o = new Fl_Box(370, 185, 65, 25, "Chorus");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
} // Fl_Box* o
{ Fl_Box* o = new Fl_Box(490, 185, 65, 25, "Vibrato");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
} // Fl_Box* o
{ sl_depth1_ = new Fl_Valuator_Ex<Fl_Slider>(300, 80, 60, 25);
  sl_depth1_->type(1);
  sl_depth1_->box(FL_DOWN_BOX);
  sl_depth1_->color(FL_BACKGROUND_COLOR);
  sl_depth1_->selection_color(FL_BACKGROUND_COLOR);
  sl_depth1_->labeltype(FL_NORMAL_LABEL);
  sl_depth1_->labelfont(0);
  sl_depth1_->labelsize(14);
  sl_depth1_->labelcolor(FL_FOREGROUND_COLOR);
  sl_depth1_->callback((Fl_Callback*)cb_sl_depth1_);
  sl_depth1_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_depth1_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_depth1_
{ sl_depth2_ = new Fl_Valuator_Ex<Fl_Slider>(300, 105, 60, 25);
  sl_depth2_->type(1);
  sl_depth2_->box(FL_DOWN_BOX);
  sl_depth2_->color(FL_BACKGROUND_COLOR);
  sl_depth2_->selection_color(FL_BACKGROUND_COLOR);
  sl_depth2_->labeltype(FL_NORMAL_LABEL);
  sl_depth2_->labelfont(0);
  sl_depth2_->labelsize(14);
  sl_depth2_->labelcolor(FL_FOREGROUND_COLOR);
  sl_depth2_->callback((Fl_Callback*)cb_sl_depth2_);
  sl_depth2_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_depth2_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_depth2_
{ sl_depth3_ = new Fl_Valuator_Ex<Fl_Slider>(300, 130, 60, 25);
  sl_depth3_->type(1);
  sl_depth3_->box(FL_DOWN_BOX);
  sl_depth3_->color(FL_BACKGROUND_COLOR);
  sl_depth3_->selection_color(FL_BACKGROUND_COLOR);
  sl_depth3_->labeltype(FL_NORMAL_LABEL);
  sl_depth3_->labelfont(0);
  sl_depth3_->labelsize(14);
  sl_depth3_->labelcolor(FL_FOREGROUND_COLOR);
  sl_depth3_->callback((Fl_Callback*)cb_sl_depth3_);
  sl_depth3_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_depth3_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_depth3_
{ sl_depth4_ = new Fl_Valuator_Ex<Fl_Slider>(300, 155, 60, 25);
  sl_depth4_->type(1);
  sl_depth4_->box(FL_DOWN_BOX);
  sl_depth4_->color(FL_BACKGROUND_COLOR);
  sl_depth4_->selection_color(FL_BACKGROUND_COLOR);
  sl_depth4_->labeltype(FL_NORMAL_LABEL);
  sl_depth4_->labelfont(0);
  sl_depth4_->labelsize(14);
  sl_depth4_->labelcolor(FL_FOREGROUND_COLOR);
  sl_depth4_->callback((Fl_Callback*)cb_sl_depth4_);
  sl_depth4_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_depth4_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_depth4_
{ sl_depth5_ = new Fl_Valuator_Ex<Fl_Slider>(300, 180, 60, 25);
  sl_depth5_->type(1);
  sl_depth5_->box(FL_DOWN_BOX);
  sl_depth5_->color(FL_BACKGROUND_COLOR);
  sl_depth5_->selection_color(FL_BACKGROUND_COLOR);
  sl_depth5_->labeltype(FL_NORMAL_LABEL);
  sl_depth5_->labelfont(0);
  sl_depth5_->labelsize(14);
  sl_depth5_->labelcolor(FL_FOREGROUND_COLOR);
  sl_depth5_->callback((Fl_Callback*)cb_sl_depth5_);
  sl_depth5_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_depth5_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_depth5_
{ sl_depth6_ = new Fl_Valuator_Ex<Fl_Slider>(300, 205, 60, 25);
  sl_depth6_->type(1);
  sl_depth6_->box(FL_DOWN_BOX);
  sl_depth6_->color(FL_BACKGROUND_COLOR);
  sl_depth6_->selection_color(FL_BACKGROUND_COLOR);
  sl_depth6_->labeltype(FL_NORMAL_LABEL);
  sl_depth6_->labelfont(0);
  sl_depth6_->labelsize(14);
  sl_depth6_->labelcolor(FL_FOREGROUND_COLOR);
  sl_depth6_->callback((Fl_Callback*)cb_sl_depth6_);
  sl_depth6_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_depth6_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_depth6_
{ cb_slow_wave_ = new Fl_Choice(435, 210, 55, 25);
  cb_slow_wave_->down_box(FL_BORDER_BOX);
  cb_slow_wave_->callback((Fl_Callback*)cb_cb_slow_wave_);
  { Fl_Menu_Item* o = &menu_cb_slow_wave_[0];
  o->image( image_sine() );
  }
  { Fl_Menu_Item* o = &menu_cb_slow_wave_[1];
  o->image( image_square() );
  }
  { Fl_Menu_Item* o = &menu_cb_slow_wave_[2];
  o->image( image_saw() );
  }
  { Fl_Menu_Item* o = &menu_cb_slow_wave_[3];
  o->image( image_ramp() );
  }
  { Fl_Menu_Item* o = &menu_cb_slow_wave_[4];
  o->image( image_triangle() );
  }
  cb_slow_wave_->menu(menu_cb_slow_wave_);
} // Fl_Choice* cb_slow_wave_
{ cb_fast_wave_ = new Fl_Choice(555, 210, 55, 25);
  cb_fast_wave_->down_box(FL_BORDER_BOX);
  cb_fast_wave_->callback((Fl_Callback*)cb_cb_fast_wave_);
  { Fl_Menu_Item* o = &menu_cb_fast_wave_[0];
  o->image( image_sine() );
  }
  { Fl_Menu_Item* o = &menu_cb_fast_wave_[1];
  o->image( image_square() );
  }
  { Fl_Menu_Item* o = &menu_cb_fast_wave_[2];
  o->image( image_saw() );
  }
  { Fl_Menu_Item* o = &menu_cb_fast_wave_[3];
  o->image( image_ramp() );
  }
  { Fl_Menu_Item* o = &menu_cb_fast_wave_[4];
  o->image( image_triangle() );
  }
  cb_fast_wave_->menu(menu_cb_fast_wave_);
} // Fl_Choice* cb_fast_wave_
{ sl_gain_in_ = new Fl_Valuator_Ex<Fl_Slider>(560, 30, 25, 95, "In");
  sl_gain_in_->type(4);
  sl_gain_in_->box(FL_THIN_DOWN_BOX);
  sl_gain_in_->color(FL_BACKGROUND_COLOR);
  sl_gain_in_->selection_color(FL_BACKGROUND_COLOR);
  sl_gain_in_->labeltype(FL_EMBOSSED_LABEL);
  sl_gain_in_->labelfont(0);
  sl_gain_in_->labelsize(12);
  sl_gain_in_->labelcolor(FL_FOREGROUND_COLOR);
  sl_gain_in_->minimum(1);
  sl_gain_in_->maximum(0);
  sl_gain_in_->callback((Fl_Callback*)cb_sl_gain_in_);
  sl_gain_in_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_gain_in_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_gain_in_
{ sl_gain_out_ = new Fl_Valuator_Ex<Fl_Slider>(585, 30, 25, 95, "Out");
  sl_gain_out_->type(4);
  sl_gain_out_->box(FL_THIN_DOWN_BOX);
  sl_gain_out_->color(FL_BACKGROUND_COLOR);
  sl_gain_out_->selection_color(FL_BACKGROUND_COLOR);
  sl_gain_out_->labeltype(FL_EMBOSSED_LABEL);
  sl_gain_out_->labelfont(0);
  sl_gain_out_->labelsize(12);
  sl_gain_out_->labelcolor(FL_FOREGROUND_COLOR);
  sl_gain_out_->minimum(1);
  sl_gain_out_->maximum(0);
  sl_gain_out_->callback((Fl_Callback*)cb_sl_gain_out_);
  sl_gain_out_->align(Fl_Align(FL_ALIGN_BOTTOM));
  sl_gain_out_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Slider>* sl_gain_out_
{ Fl_Box* o = new Fl_Box(560, 5, 50, 25, "Gain");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
} // Fl_Box* o
{ dl_slow_rand_ = new Fl_Valuator_Ex<Fl_Knob>(425, 240, 35, 35, "Rand");
  dl_slow_rand_->box(FL_OVAL_BOX);
  dl_slow_rand_->color(FL_BACKGROUND_COLOR);
  dl_slow_rand_->selection_color(FL_INACTIVE_COLOR);
  dl_slow_rand_->labeltype(FL_ENGRAVED_LABEL);
  dl_slow_rand_->labelfont(0);
  dl_slow_rand_->labelsize(12);
  dl_slow_rand_->labelcolor(FL_FOREGROUND_COLOR);
  dl_slow_rand_->callback((Fl_Callback*)cb_dl_slow_rand_);
  dl_slow_rand_->align(Fl_Align(FL_ALIGN_RIGHT));
  dl_slow_rand_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_slow_rand_
{ dl_fast_rand_ = new Fl_Valuator_Ex<Fl_Knob>(545, 240, 35, 35, "Rand");
  dl_fast_rand_->box(FL_OVAL_BOX);
  dl_fast_rand_->color(FL_BACKGROUND_COLOR);
  dl_fast_rand_->selection_color(FL_INACTIVE_COLOR);
  dl_fast_rand_->labeltype(FL_ENGRAVED_LABEL);
  dl_fast_rand_->labelfont(0);
  dl_fast_rand_->labelsize(12);
  dl_fast_rand_->labelcolor(FL_FOREGROUND_COLOR);
  dl_fast_rand_->callback((Fl_Callback*)cb_dl_fast_rand_);
  dl_fast_rand_->align(Fl_Align(FL_ALIGN_RIGHT));
  dl_fast_rand_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_fast_rand_
{ dl_mod_range_ = new Fl_Valuator_Ex<Fl_Knob>(370, 80, 45, 45, "Range");
  dl_mod_range_->box(FL_OVAL_BOX);
  dl_mod_range_->color(FL_BACKGROUND_COLOR);
  dl_mod_range_->selection_color(FL_INACTIVE_COLOR);
  dl_mod_range_->labeltype(FL_ENGRAVED_LABEL);
  dl_mod_range_->labelfont(0);
  dl_mod_range_->labelsize(12);
  dl_mod_range_->labelcolor(FL_FOREGROUND_COLOR);
  dl_mod_range_->callback((Fl_Callback*)cb_dl_mod_range_);
  dl_mod_range_->align(Fl_Align(FL_ALIGN_BOTTOM));
  dl_mod_range_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_mod_range_
{ Fl_Box* o = new Fl_Box(30, 245, 125, 25, "Low-pass filter");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
  o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
} // Fl_Box* o
{ dl_lpf_cutoff_ = new Fl_Valuator_Ex<Fl_Knob>(160, 235, 40, 40, "Cutoff");
  dl_lpf_cutoff_->box(FL_OVAL_BOX);
  dl_lpf_cutoff_->color(FL_BACKGROUND_COLOR);
  dl_lpf_cutoff_->selection_color(FL_INACTIVE_COLOR);
  dl_lpf_cutoff_->labeltype(FL_EMBOSSED_LABEL);
  dl_lpf_cutoff_->labelfont(0);
  dl_lpf_cutoff_->labelsize(12);
  dl_lpf_cutoff_->labelcolor(FL_FOREGROUND_COLOR);
  dl_lpf_cutoff_->callback((Fl_Callback*)cb_dl_lpf_cutoff_);
  dl_lpf_cutoff_->align(Fl_Align(FL_ALIGN_RIGHT_BOTTOM));
  dl_lpf_cutoff_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_lpf_cutoff_
{ dl_lpf_q_ = new Fl_Valuator_Ex<Fl_Knob>(255, 235, 40, 40, "Q");
  dl_lpf_q_->box(FL_OVAL_BOX);
  dl_lpf_q_->color(FL_BACKGROUND_COLOR);
  dl_lpf_q_->selection_color(FL_INACTIVE_COLOR);
  dl_lpf_q_->labeltype(FL_EMBOSSED_LABEL);
  dl_lpf_q_->labelfont(0);
  dl_lpf_q_->labelsize(12);
  dl_lpf_q_->labelcolor(FL_FOREGROUND_COLOR);
  dl_lpf_q_->callback((Fl_Callback*)cb_dl_lpf_q_);
  dl_lpf_q_->align(Fl_Align(FL_ALIGN_RIGHT_BOTTOM));
  dl_lpf_q_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_lpf_q_
{ btn_mono_ = new Fl_Toggle_Button(555, 150, 55, 25, "Mono");
  btn_mono_->box(FL_UP_BOX);
  btn_mono_->color(FL_BACKGROUND_COLOR);
  btn_mono_->selection_color(FL_BACKGROUND_COLOR);
  btn_mono_->labeltype(FL_ENGRAVED_LABEL);
  btn_mono_->labelfont(0);
  btn_mono_->labelsize(14);
  btn_mono_->labelcolor(FL_FOREGROUND_COLOR);
  btn_mono_->callback((Fl_Callback*)cb_btn_mono_);
  btn_mono_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_mono_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_mono_
{ btn_stereo_ = new Fl_Toggle_Button(500, 150, 55, 25, "Stereo");
  btn_stereo_->box(FL_UP_BOX);
  btn_stereo_->color(FL_BACKGROUND_COLOR);
  btn_stereo_->selection_color(FL_BACKGROUND_COLOR);
  btn_stereo_->labeltype(FL_ENGRAVED_LABEL);
  btn_stereo_->labelfont(0);
  btn_stereo_->labelsize(14);
  btn_stereo_->labelcolor(FL_FOREGROUND_COLOR);
  btn_stereo_->callback((Fl_Callback*)cb_btn_stereo_);
  btn_stereo_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_stereo_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_stereo_
{ btn_routeL1_ = new Fl_Toggle_Button(180, 80, 25, 25, "L");
  btn_routeL1_->box(FL_UP_BOX);
  btn_routeL1_->color(FL_BACKGROUND_COLOR);
  btn_routeL1_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeL1_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeL1_->labelfont(0);
  btn_routeL1_->labelsize(14);
  btn_routeL1_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeL1_->callback((Fl_Callback*)cb_btn_routeL1_);
  btn_routeL1_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeL1_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeL1_
{ Fl_Box* o = new Fl_Box(170, 55, 75, 25, "Routing");
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
  o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
} // Fl_Box* o
{ btn_routeR1_ = new Fl_Toggle_Button(210, 80, 25, 25, "R");
  btn_routeR1_->box(FL_UP_BOX);
  btn_routeR1_->color(FL_BACKGROUND_COLOR);
  btn_routeR1_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeR1_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeR1_->labelfont(0);
  btn_routeR1_->labelsize(14);
  btn_routeR1_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeR1_->callback((Fl_Callback*)cb_btn_routeR1_);
  btn_routeR1_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeR1_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeR1_
{ btn_routeL2_ = new Fl_Toggle_Button(180, 105, 25, 25, "L");
  btn_routeL2_->box(FL_UP_BOX);
  btn_routeL2_->color(FL_BACKGROUND_COLOR);
  btn_routeL2_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeL2_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeL2_->labelfont(0);
  btn_routeL2_->labelsize(14);
  btn_routeL2_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeL2_->callback((Fl_Callback*)cb_btn_routeL2_);
  btn_routeL2_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeL2_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeL2_
{ btn_routeR2_ = new Fl_Toggle_Button(210, 105, 25, 25, "R");
  btn_routeR2_->box(FL_UP_BOX);
  btn_routeR2_->color(FL_BACKGROUND_COLOR);
  btn_routeR2_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeR2_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeR2_->labelfont(0);
  btn_routeR2_->labelsize(14);
  btn_routeR2_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeR2_->callback((Fl_Callback*)cb_btn_routeR2_);
  btn_routeR2_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeR2_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeR2_
{ btn_routeL3_ = new Fl_Toggle_Button(180, 130, 25, 25, "L");
  btn_routeL3_->box(FL_UP_BOX);
  btn_routeL3_->color(FL_BACKGROUND_COLOR);
  btn_routeL3_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeL3_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeL3_->labelfont(0);
  btn_routeL3_->labelsize(14);
  btn_routeL3_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeL3_->callback((Fl_Callback*)cb_btn_routeL3_);
  btn_routeL3_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeL3_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeL3_
{ btn_routeR3_ = new Fl_Toggle_Button(210, 130, 25, 25, "R");
  btn_routeR3_->box(FL_UP_BOX);
  btn_routeR3_->color(FL_BACKGROUND_COLOR);
  btn_routeR3_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeR3_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeR3_->labelfont(0);
  btn_routeR3_->labelsize(14);
  btn_routeR3_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeR3_->callback((Fl_Callback*)cb_btn_routeR3_);
  btn_routeR3_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeR3_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeR3_
{ btn_routeL4_ = new Fl_Toggle_Button(180, 155, 25, 25, "L");
  btn_routeL4_->box(FL_UP_BOX);
  btn_routeL4_->color(FL_BACKGROUND_COLOR);
  btn_routeL4_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeL4_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeL4_->labelfont(0);
  btn_routeL4_->labelsize(14);
  btn_routeL4_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeL4_->callback((Fl_Callback*)cb_btn_routeL4_);
  btn_routeL4_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeL4_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeL4_
{ btn_routeR4_ = new Fl_Toggle_Button(210, 155, 25, 25, "R");
  btn_routeR4_->box(FL_UP_BOX);
  btn_routeR4_->color(FL_BACKGROUND_COLOR);
  btn_routeR4_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeR4_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeR4_->labelfont(0);
  btn_routeR4_->labelsize(14);
  btn_routeR4_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeR4_->callback((Fl_Callback*)cb_btn_routeR4_);
  btn_routeR4_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeR4_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeR4_
{ btn_routeL5_ = new Fl_Toggle_Button(180, 180, 25, 25, "L");
  btn_routeL5_->box(FL_UP_BOX);
  btn_routeL5_->color(FL_BACKGROUND_COLOR);
  btn_routeL5_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeL5_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeL5_->labelfont(0);
  btn_routeL5_->labelsize(14);
  btn_routeL5_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeL5_->callback((Fl_Callback*)cb_btn_routeL5_);
  btn_routeL5_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeL5_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeL5_
{ btn_routeR5_ = new Fl_Toggle_Button(210, 180, 25, 25, "R");
  btn_routeR5_->box(FL_UP_BOX);
  btn_routeR5_->color(FL_BACKGROUND_COLOR);
  btn_routeR5_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeR5_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeR5_->labelfont(0);
  btn_routeR5_->labelsize(14);
  btn_routeR5_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeR5_->callback((Fl_Callback*)cb_btn_routeR5_);
  btn_routeR5_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeR5_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeR5_
{ btn_routeL6_ = new Fl_Toggle_Button(180, 205, 25, 25, "L");
  btn_routeL6_->box(FL_UP_BOX);
  btn_routeL6_->color(FL_BACKGROUND_COLOR);
  btn_routeL6_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeL6_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeL6_->labelfont(0);
  btn_routeL6_->labelsize(14);
  btn_routeL6_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeL6_->callback((Fl_Callback*)cb_btn_routeL6_);
  btn_routeL6_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeL6_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeL6_
{ btn_routeR6_ = new Fl_Toggle_Button(210, 205, 25, 25, "R");
  btn_routeR6_->box(FL_UP_BOX);
  btn_routeR6_->color(FL_BACKGROUND_COLOR);
  btn_routeR6_->selection_color(FL_BACKGROUND_COLOR);
  btn_routeR6_->labeltype(FL_EMBOSSED_LABEL);
  btn_routeR6_->labelfont(0);
  btn_routeR6_->labelsize(14);
  btn_routeR6_->labelcolor(FL_FOREGROUND_COLOR);
  btn_routeR6_->callback((Fl_Callback*)cb_btn_routeR6_);
  btn_routeR6_->align(Fl_Align(FL_ALIGN_CENTER));
  btn_routeR6_->when(FL_WHEN_RELEASE);
} // Fl_Toggle_Button* btn_routeR6_
{ Fl_Button* o = new Fl_Button(315, 5, 45, 25, "Load");
  o->labeltype(FL_ENGRAVED_LABEL);
  o->callback((Fl_Callback*)cb_Load);
} // Fl_Button* o
{ Fl_Button* o = new Fl_Button(315, 30, 45, 25, "Save");
  o->labeltype(FL_ENGRAVED_LABEL);
  o->callback((Fl_Callback*)cb_Save);
} // Fl_Button* o
{ dl_regen_ = new Fl_Valuator_Ex<Fl_Knob>(445, 140, 35, 35, "Regen");
  dl_regen_->box(FL_OVAL_BOX);
  dl_regen_->color(FL_BACKGROUND_COLOR);
  dl_regen_->selection_color(FL_INACTIVE_COLOR);
  dl_regen_->labeltype(FL_ENGRAVED_LABEL);
  dl_regen_->labelfont(0);
  dl_regen_->labelsize(12);
  dl_regen_->labelcolor(FL_FOREGROUND_COLOR);
  dl_regen_->callback((Fl_Callback*)cb_dl_regen_);
  dl_regen_->align(Fl_Align(FL_ALIGN_BOTTOM));
  dl_regen_->when(FL_WHEN_CHANGED);
} // Fl_Valuator_Ex<Fl_Knob>* dl_regen_
end();
}

void Main_View::controller(Main_Controller *x) {
  controller_ = x;
  x->set_parameter_callback(&parameter, this);
  x->set_modulation_callback(&modulation, this);
}
